-- Användarinformation och autentisering
CREATE TABLE IF NOT EXISTS User (
    user_id INTEGER PRIMARY KEY AUTOINCREMENT,
    email TEXT NOT NULL UNIQUE,
    user_name TEXT NOT NULL UNIQUE,
    password TEXT NOT NULL,
    display_name TEXT,
    profile_image BLOB,
    bio TEXT,
    auth_method TEXT
);

-- Användares sparade recept
CREATE TABLE IF NOT EXISTS Saved (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    recipe_id INTEGER NOT NULL,
    FOREIGN KEY (user_id) REFERENCES User(user_id),
    FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id)
);

-- Receptinformation
CREATE TABLE IF NOT EXISTS Recipe (
    recipe_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    difficulty INTEGER NOT NULL CHECK (difficulty >= 0 AND difficulty <= 5),
    dish_image BLOB,
    UNIQUE (user_id, title),
    FOREIGN KEY (user_id) REFERENCES User(user_id)
);

-- Ingredienser för recept
CREATE TABLE IF NOT EXISTS Ingredient (
    ingredient_id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE
);

-- Kopplingstabell mellan recept och ingredienser
CREATE TABLE IF NOT EXISTS RecipeIngredient (
    recipe_id INTEGER NOT NULL,
    ingredient_id INTEGER NOT NULL,
    amount TEXT NOT NULL,
    PRIMARY KEY (recipe_id, ingredient_id),
    FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
    FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id)
);

-- Receptinstruktioner
CREATE TABLE IF NOT EXISTS Instruction (
    instruction_id INTEGER PRIMARY KEY AUTOINCREMENT,
    recipe_id INTEGER NOT NULL,
    instruction_order INTEGER NOT NULL,
    instruction TEXT NOT NULL,
    FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id)
);

-- Kommentarer på recept
CREATE TABLE IF NOT EXISTS Comment (
    comment_id INTEGER PRIMARY KEY AUTOINCREMENT,
    recipe_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    message TEXT,
    parent_id INTEGER,
    timestamp TIMESTAMP,
    FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
    FOREIGN KEY (user_id) REFERENCES User(user_id)
);

-- Receptbetyg från användare
CREATE TABLE IF NOT EXISTS Score (
    score_id INTEGER PRIMARY KEY AUTOINCREMENT,
    recipe_id INTEGER NOT NULL,
    score INTEGER CHECK (score >= 0 AND score <= 5),
    FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id)
);

-- Användarsessioner
CREATE TABLE IF NOT EXISTS Session (
    session_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    session_token TEXT NOT NULL,
    expiration_time DATETIME NOT NULL,
    FOREIGN KEY (user_id) REFERENCES User(user_id)
);

-- Insert a New User:
INSERT INTO User (email, user_name, password, display_name, profile_image, bio, auth_method)
VALUES ('example@email.com', 'username', 'password123', 'John Doe', NULL, 'A short bio', 'email');

-- Retrieve User Information:
SELECT * FROM User WHERE user_id = 1;

-- Insert a New Recipe:
INSERT INTO Recipe (user_id, title, description, difficulty, dish_image)
VALUES (1, 'Delicious Pasta', 'A recipe for pasta', 3, NULL);

-- Retrieve All Recipes by a User:
INSERT INTO Ingredient (name) VALUES ('Pasta');
INSERT INTO Ingredient (name) VALUES ('Tomato Sauce');

INSERT INTO RecipeIngredient (recipe_id, ingredient_id, amount)
VALUES (1, 1, '200g'), (1, 2, '1 cup');

-- Retrieve Ingredients for a Recipe:
SELECT i.name, ri.amount
FROM Ingredient i
JOIN RecipeIngredient ri ON i.ingredient_id = ri.ingredient_id
WHERE ri.recipe_id = 1;

-- Add a Comment to a Recipe:
INSERT INTO Comment (recipe_id, user_id, message, parent_id, timestamp)
VALUES (1, 1, 'This recipe is great!', NULL, CURRENT_TIMESTAMP);

-- Retrieve Comments for a Recipe:
SELECT * FROM Comment WHERE recipe_id = 1;

-- Update User Profile Information:
UPDATE User
SET display_name = 'Updated Name', bio = 'Updated bio'
WHERE user_id = 1;

-- Delete a Recipe:
DELETE FROM Recipe WHERE recipe_id = 1;
